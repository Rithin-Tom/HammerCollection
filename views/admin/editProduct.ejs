<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Product</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: '#2563eb',
            'primary-hover': '#1d4ed8',
            'primary-light': '#dbeafe',
            success: '#10b981',
            'success-light': '#d1fae5',
            warning: '#f59e0b',
            'warning-light': '#fef3c7',
            danger: '#ef4444',
            'danger-light': '#fee2e2',
          }
        }
      }
    }
  </script>
  <style>
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .animate-spin {
      animation: spin 1s linear infinite;
    }
  </style>
</head>
<body class="font-sans bg-gradient-to-br from-gray-50 to-gray-100 text-gray-900 leading-relaxed min-h-screen text-sm">
  <section class="min-h-screen p-4">
    <div class="max-w-6xl mx-auto">
      <!-- Loading overlay -->
      <div class="fixed inset-0 bg-white bg-opacity-95 flex items-center justify-center z-50 opacity-0 invisible transition-all duration-200" id="loading-overlay">
        <div class="text-center">
          <div class="w-12 h-12 border-3 border-gray-200 border-t-primary rounded-full animate-spin mx-auto mb-4"></div>
          <p>Processing...</p>
        </div>
      </div>

      <div class="flex flex-col gap-6">
        <div class="bg-white rounded-2xl shadow-xl overflow-hidden border border-gray-200">
          <!-- Header -->
          <div class="flex items-center justify-between p-8 border-b border-gray-200 bg-gradient-to-r from-white to-gray-50">
            <div class="flex items-center gap-4">
              <div>
                <h1 class="text-3xl font-bold text-gray-900 tracking-tight">Edit Product</h1>
                <p class="text-sm text-gray-600 mt-1">Update product information</p>
              </div>
            </div>
            <div class="flex items-center gap-3">
              <a href="/admin/products" class="inline-flex items-center gap-2 px-6 py-3 bg-white text-gray-600 border border-gray-300 rounded-xl font-semibold hover:bg-gray-50 hover:text-gray-900 hover:border-gray-400 transition-all duration-200">
                <span class="text-xl">‚Üê</span>
                <span>Back to Products</span>
              </a>
              <button type="button" class="inline-flex items-center gap-2 px-6 py-3 bg-red-600 text-white rounded-xl font-semibold hover:bg-red-700 transition-all duration-200" onclick="deleteProduct()">
                <span class="text-xl">üóë</span>
                <span>Delete</span>
              </button>
            </div>
          </div>

          <!-- Messages -->
          <div class="px-8">
            <% if (messages && messages.error && messages.error.length > 0) { %>
              <div class="flex items-center gap-2 p-4 bg-danger-light text-red-800 border border-red-200 rounded-xl my-4" id="error-msg">
                <span class="text-xl">‚ö†</span>
                <%= messages.error[0] %>
              </div>
            <% } %>
            <% if (messages && messages.success && messages.success.length > 0) { %>
              <div class="flex items-center gap-2 p-4 bg-success-light text-green-800 border border-green-200 rounded-xl my-4" id="success-msg">
                <span class="text-xl">‚úÖ</span>
                <%= messages.success[0] %>
              </div>
            <% } %>
            <div class="hidden flex items-center gap-2 p-4 bg-danger-light text-red-800 border border-red-200 rounded-xl my-4" id="dynamic-error-msg"></div>
            <div class="hidden flex items-center gap-2 p-4 bg-success-light text-green-800 border border-green-200 rounded-xl my-4" id="dynamic-success-msg"></div>
          </div>

          <!-- Product Form -->
          <form id="product-form" enctype="multipart/form-data" class="p-8">
            <input type="hidden" id="product-id" value="<%= product._id %>">
            
            <div class="flex flex-col gap-8 mb-8">
              <!-- Basic Information -->
              <div class="flex flex-col gap-6 p-8 bg-white border border-gray-200 rounded-2xl shadow-sm hover:shadow-md transition-shadow duration-200">
                <h4 class="flex items-center gap-2 text-xl font-bold text-gray-900 mb-2 pb-3 border-b-2 border-primary-light">
                  <span class="text-2xl">üìù</span>
                  Basic Information
                </h4>
                
                <div class="flex flex-col gap-2">
                  <label class="text-sm font-semibold text-gray-700">Product Name <span class="text-danger">*</span></label>
                  <input type="text" id="product-name" name="name" class="px-4 py-3.5 border-2 border-gray-300 rounded-xl text-sm transition-all duration-200 bg-white focus:outline-none focus:border-primary focus:ring-4 focus:ring-primary-light" placeholder="Enter product name" value="<%= product.productName %>">
                  <p class="text-xs text-danger font-medium hidden" id="name-error"></p>
                </div>

                <div class="flex flex-col gap-2">
                  <label class="text-sm font-semibold text-gray-700">Description</label>
                  <textarea id="product-description" name="description" class="px-4 py-3.5 border-2 border-gray-300 rounded-xl text-sm transition-all duration-200 bg-white focus:outline-none focus:border-primary focus:ring-4 focus:ring-primary-light" rows="4" placeholder="Enter product description"><%= product.description || '' %></textarea>
                  <p class="text-xs text-danger font-medium hidden" id="description-error"></p>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div class="flex flex-col gap-2">
                    <label class="text-sm font-semibold text-gray-700">Category <span class="text-danger">*</span></label>
                    <select id="product-category" name="category" class="px-4 py-3.5 border-2 border-gray-300 rounded-xl text-sm transition-all duration-200 bg-white focus:outline-none focus:border-primary focus:ring-4 focus:ring-primary-light" required>
                      <option value="<%=product.category._id%>"><%=product.category.name%></option>
                      <% categories.forEach(category => { %>
                        <option value="<%= category._id %>" <%= product.category && product.category._id === category._id ? 'selected' : '' %>><%= category.name %></option>
                      <% }) %>
                    </select>
                    <p class="text-xs text-danger font-medium hidden" id="category-error"></p>
                  </div>
                </div>
              </div>

              <!-- Pricing & Stock -->
              <div class="flex flex-col gap-6 p-8 bg-white border border-gray-200 rounded-2xl shadow-sm hover:shadow-md transition-shadow duration-200">
                <h4 class="flex items-center gap-2 text-xl font-bold text-gray-900 mb-2 pb-3 border-b-2 border-primary-light">
                  <span class="text-2xl">üí∞</span>
                  Pricing & Stock
                </h4>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div class="flex flex-col gap-2">
                    <label class="text-sm font-semibold text-gray-700">Regular Price <span class="text-danger">*</span></label>
                    <div class="flex border-2 border-gray-300 rounded-xl overflow-hidden transition-all duration-200 focus-within:border-primary focus-within:ring-4 focus-within:ring-primary-light">
                      <span class="px-4 py-3.5 bg-gray-100 text-gray-600 text-sm border-r border-gray-300 font-semibold">‚Çπ</span>
                      <input type="number" id="product-regular-price" name="regularPrice" class="px-4 py-3.5 text-sm border-none outline-none flex-1" placeholder="0.00" step="0.01" min="0" required value="<%= product.regularPrice %>">
                    </div>
                    <p class="text-xs text-danger font-medium hidden" id="regularPrice-error"></p>
                  </div>

                  <div class="flex flex-col gap-2">
                    <label class="text-sm font-semibold text-gray-700">Sale Price</label>
                    <div class="flex border-2 border-gray-300 rounded-xl overflow-hidden transition-all duration-200 focus-within:border-primary focus-within:ring-4 focus-within:ring-primary-light">
                      <span class="px-4 py-3.5 bg-gray-100 text-gray-600 text-sm border-r border-gray-300 font-semibold">‚Çπ</span>
                      <input type="number" id="product-sale-price" name="salePrice" class="px-4 py-3.5 text-sm border-none outline-none flex-1" placeholder="0.00" step="0.01" min="0" value="<%= product.salePrice || '' %>">
                    </div>
                    <p class="text-xs text-danger font-medium hidden" id="salePrice-error"></p>
                  </div>
                </div>

                <div class="flex flex-col gap-2">
                  <label class="text-sm font-semibold text-gray-700">Stock Quantity</label>
                  <input type="number" id="product-stock" name="stock" class="px-4 py-3.5 border-2 border-gray-300 rounded-xl text-sm transition-all duration-200 bg-white focus:outline-none focus:border-primary focus:ring-4 focus:ring-primary-light" placeholder="0" min="0" value="<%= product.quantity || 0 %>">
                  <p class="text-xs text-danger font-medium hidden" id="stock-error"></p>
                </div>

                <div class="flex flex-col gap-2">
                  <label class="text-sm font-semibold text-gray-700">Max Cart Quantity <span class="text-danger">*</span></label>
                  <input type="number" id="product-max-cart-qty" name="maxCartQuantity" class="px-4 py-3.5 border-2 border-gray-300 rounded-xl text-sm transition-all duration-200 bg-white focus:outline-none focus:border-primary focus:ring-4 focus:ring-primary-light" min="1" required value="<%= product.maxCartQuantity || 5 %>">
                  <p class="text-xs text-danger font-medium hidden" id="maxCartQuantity-error"></p>
                </div>
              </div>

              <!-- Images -->
              <div class="flex flex-col gap-6 p-8 bg-white border border-gray-200 rounded-2xl shadow-sm hover:shadow-md transition-shadow duration-200">
                <h4 class="flex items-center gap-2 text-xl font-bold text-gray-900 mb-2 pb-3 border-b-2 border-primary-light">
                  <span class="text-2xl">üì∏</span>
                  Product Images
                </h4>
                <p class="text-sm text-gray-600 -mt-2 mb-4">Upload at least 3 high-quality images of your product</p>

                <div class="flex flex-col gap-6">
                  <div class="border-3 border-dashed border-gray-300 rounded-2xl p-12 text-center cursor-pointer transition-all duration-200 bg-gray-50 hover:border-primary hover:bg-primary-light hover:-translate-y-1" id="image-upload-area">
                    <div class="flex flex-col items-center gap-4">
                      <div class="text-5xl text-gray-400">üì§</div>
                      <p class="text-base font-semibold text-gray-700">Click to upload or drag and drop</p>
                      <span class="text-sm text-gray-500">PNG, JPG up to 5MB each</span>
                    </div>
                    <input type="file" id="image-input" name="images" multiple accept="image/*" class="hidden">
                  </div>

                  <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-6" id="image-preview-container"></div>
                  <p class="text-xs text-danger font-medium hidden" id="images-error"></p>
                </div>
              </div>

              <!-- Settings -->
              <div class="flex flex-col gap-6 p-8 bg-white border border-gray-200 rounded-2xl shadow-sm hover:shadow-md transition-shadow duration-200">
                <h4 class="flex items-center gap-2 text-xl font-bold text-gray-900 mb-2 pb-3 border-b-2 border-primary-light">
                  <span class="text-2xl">‚öô</span>
                  Product Settings
                </h4>

                <div class="flex items-center gap-4 p-4 bg-gray-50 border border-gray-200 rounded-xl">
                  <label class="flex items-center gap-3 cursor-pointer select-none font-medium">
                    <input type="checkbox" id="product-active" name="isActive" <%= product.isActive ? 'checked' : '' %> class="hidden">
                    <span class="w-5 h-5 border-2 border-gray-300 rounded-md relative transition-all duration-200 bg-white checkbox-custom"></span>
                    <span class="text-sm text-gray-700">Active Product</span>
                  </label>
                </div>

                <div class="flex items-center gap-4 p-4 bg-gray-50 border border-gray-200 rounded-xl">
                  <label class="flex items-center gap-3 cursor-pointer select-none font-medium">
                    <input type="checkbox" id="product-featured" name="isFeatured" <%= product.isFeatured ? 'checked' : '' %> class="hidden">
                    <span class="w-5 h-5 border-2 border-gray-300 rounded-md relative transition-all duration-200 bg-white checkbox-custom"></span>
                    <span class="text-sm text-gray-700">Featured Product</span>
                  </label>
                </div>
              </div>
            </div>

            <div class="flex gap-4 justify-end p-8 border-t border-gray-200 bg-gray-50">
              <a href="/admin/products" class="inline-flex items-center gap-2 px-6 py-3 bg-white text-gray-600 border border-gray-300 rounded-xl font-semibold hover:bg-gray-50 hover:text-gray-900 hover:border-gray-400 transition-all duration-200">Cancel</a>
              <button type="submit" class="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-primary to-primary-hover text-white rounded-xl font-semibold shadow-lg hover:-translate-y-0.5 hover:shadow-xl transition-all duration-200" id="product-submit-btn">
                <span class="w-4 h-4 border-2 border-transparent border-t-current rounded-full animate-spin hidden" id="product-spinner"></span>
                <span id="product-submit-text">Update Product</span>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </section>

  <!-- Image Crop Modal -->
  <div class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 opacity-0 invisible transition-all duration-200" id="crop-modal">
    <div class="bg-white rounded-2xl shadow-2xl max-w-3xl w-11/12 max-h-[90vh] overflow-hidden transform scale-95 transition-transform duration-200">
      <div class="flex items-center justify-between p-8 border-b border-gray-200 bg-gray-50">
        <h3 class="flex items-center gap-2 text-xl font-bold text-gray-900">
          <span class="text-2xl">üñº</span>
          Crop Image
        </h3>
        <button class="p-2 bg-transparent border-none text-gray-400 cursor-pointer rounded-xl hover:bg-gray-200 hover:text-gray-600 transition-all duration-200 text-2xl" onclick="closeCropModal()">√ó</button>
      </div>
      <div class="p-8 max-h-96 overflow-y-auto">
        <div class="max-w-full max-h-96 overflow-hidden">
          <img id="crop-image" src="/placeholder.svg" alt="Crop" class="max-w-full h-auto">
        </div>
      </div>
      <div class="flex gap-4 justify-end p-8 border-t border-gray-200 bg-gray-50">
        <button class="inline-flex items-center gap-2 px-6 py-3 bg-white text-gray-600 border border-gray-300 rounded-xl font-semibold hover:bg-gray-50 hover:text-gray-900 hover:border-gray-400 transition-all duration-200" onclick="closeCropModal()">Cancel</button>
        <button class="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-primary to-primary-hover text-white rounded-xl font-semibold shadow-lg hover:-translate-y-0.5 hover:shadow-xl transition-all duration-200" onclick="applyCrop()">Apply Crop</button>
      </div>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 opacity-0 invisible transition-all duration-200" id="delete-modal">
    <div class="bg-white rounded-2xl shadow-2xl max-w-md w-11/12 overflow-hidden transform scale-95 transition-transform duration-200">
      <div class="p-8 text-center">
        <div class="text-6xl mb-4">üóë</div>
        <h3 class="text-xl font-bold text-gray-900 mb-2">Delete Product</h3>
        <p class="text-gray-600 mb-6">Are you sure you want to delete this product? This action cannot be undone.</p>
        <div class="flex gap-4 justify-center">
          <button class="px-6 py-3 bg-white text-gray-600 border border-gray-300 rounded-xl font-semibold hover:bg-gray-50 transition-all duration-200" onclick="closeDeleteModal()">Cancel</button>
          <button class="px-6 py-3 bg-red-600 text-white rounded-xl font-semibold hover:bg-red-700 transition-all duration-200" onclick="confirmDelete()">
            <span class="w-4 h-4 border-2 border-transparent border-t-current rounded-full animate-spin hidden" id="delete-spinner"></span>
            <span id="delete-text">Delete Product</span>
          </button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script>
    const BASE_URL = window.location.origin;
    const MIN_IMAGES = 3;
    const PRODUCT_ID = '<%= product._id %>';
    const productName ='<%= product.productName %>'
    const productId ='<%= product._id %>'



    const STATE = {
      uploadedImages: <%- JSON.stringify(product.productImage || []) %>,              
      cropper: null,
      currentCropFile: null,
      currentTarget: null, 
      isLoading: false
    };


    function showLoading() {
      STATE.isLoading = true;
      const overlay = document.getElementById('loading-overlay');
      overlay.classList.remove('opacity-0', 'invisible');
      overlay.classList.add('opacity-100', 'visible');
    }

    function hideLoading() {
      STATE.isLoading = false;
      const overlay = document.getElementById('loading-overlay');
      overlay.classList.remove('opacity-100', 'visible');
      overlay.classList.add('opacity-0', 'invisible');
    }

    function clearFormErrors() {
      document.querySelectorAll('.text-danger').forEach(el => {
        if (el.tagName === 'P') {
          el.textContent = '';
          el.classList.add('hidden');
        }
      });
      document.querySelectorAll('input, select, textarea').forEach(el => {
        el.classList.remove('border-danger', 'ring-4', 'ring-red-200');
        el.classList.add('border-gray-300');
      });
      // Clear dynamic messages
      document.getElementById('dynamic-error-msg').classList.add('hidden');
      document.getElementById('dynamic-success-msg').classList.add('hidden');
    }

    function showFormError(fieldId, msg) {
    
      
      // Handle dynamic messages differently
      if (fieldId === 'dynamic-error-msg') {
        const el = document.getElementById('dynamic-error-msg');
        el.innerHTML = '<span class="text-xl">‚ö†</span> ' + msg;
        el.classList.remove('hidden');
        return;
      }
      
      const errorEl = document.getElementById(fieldId);
      if (!errorEl) {
        console.log('Error element not found:', fieldId);
        return;
      }
      
      errorEl.textContent = msg;
      errorEl.classList.remove('hidden');
      
      // Also add error class to the input
      const inputId = fieldId.replace('-error', '');
      const input = document.getElementById(inputId);
      if (input) {
        input.classList.remove('border-gray-300');
        input.classList.add('border-danger', 'ring-4', 'ring-red-200');
      }
    }

    // Delete Product Functions
    function deleteProduct() {
      const modal = document.getElementById('delete-modal');
      modal.classList.remove('opacity-0', 'invisible');
      modal.classList.add('opacity-100', 'visible');
      modal.querySelector('.transform').classList.remove('scale-95');
      modal.querySelector('.transform').classList.add('scale-100');
    }

    function closeDeleteModal() {
      const modal = document.getElementById('delete-modal');
      modal.classList.remove('opacity-100', 'visible');
      modal.classList.add('opacity-0', 'invisible');
      modal.querySelector('.transform').classList.remove('scale-100');
      modal.querySelector('.transform').classList.add('scale-95');
    }



  async function confirmDelete() {
    
    
  const confirmResult = await Swal.fire({
    title: `Delete "${productName}"?`,
    text: "This action cannot be undone!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Yes, delete it!',
    cancelButtonText: 'Cancel'
  });

  if (!confirmResult.isConfirmed) return;

  try {
    document.getElementById('delete-spinner').classList.remove('hidden');
    document.getElementById('delete-text').textContent = 'Deleting...';

    const res = await fetch(`${BASE_URL}/admin/products/api/delete/${productId}`, {
      method: 'DELETE',
     
      headers: { 'Content-type': 'application/json' }
    });

    


    const json = await res.json();

    if (json.success) {
      await Swal.fire({
        icon: 'success',
        title: `Product "${productName}" deleted!`,
        showConfirmButton: false,
        timer: 1500
      });

        window.location.href = '/admin/products'; // Refresh the list or page
    } else {
      Swal.fire('Error', json.message || 'Failed to delete product.', 'error');
    }
  } catch (err) {
    console.error(err);
    Swal.fire('Error', 'Server error while deleting product.', 'error');
  } finally {
    document.getElementById('delete-spinner').classList.add('hidden');
    document.getElementById('delete-text').textContent = 'Delete Product';
    closeDeleteModal?.(); // optional if modal exists
  }
}


    // Custom checkbox styling
    document.addEventListener('DOMContentLoaded', function() {
      const checkboxes = document.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(checkbox => {
        const customSpan = checkbox.nextElementSibling;
        
        function updateCheckbox() {
          if (checkbox.checked) {
            customSpan.classList.remove('border-gray-300', 'bg-white');
            customSpan.classList.add('bg-primary', 'border-primary');
            customSpan.innerHTML = '<span class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-sm font-bold">‚úì</span>';
          } else {
            customSpan.classList.remove('bg-primary', 'border-primary');
            customSpan.classList.add('border-gray-300', 'bg-white');
            customSpan.innerHTML = '';
          }
        }
        
        checkbox.addEventListener('change', updateCheckbox);
        updateCheckbox(); // Initial state
      });
    });

    // INITIALIZE MAIN IMAGE UPLOAD
    function initializeImageUpload() {
      const area = document.getElementById('image-upload-area');
      const input = document.getElementById('image-input');

      area.addEventListener('click', () => input.click());

      area.addEventListener('dragover', e => {
        e.preventDefault();
        area.classList.remove('border-gray-300', 'bg-gray-50');
        area.classList.add('border-primary', 'bg-primary-light');
      });

      area.addEventListener('dragleave', e => {
        e.preventDefault();
        area.classList.remove('border-primary', 'bg-primary-light');
        area.classList.add('border-gray-300', 'bg-gray-50');
      });

      area.addEventListener('drop', e => {
        e.preventDefault();
        area.classList.remove('border-primary', 'bg-primary-light');
        area.classList.add('border-gray-300', 'bg-gray-50');
        handleFiles([...e.dataTransfer.files], 'main');
      });

      input.addEventListener('change', e => handleFiles([...e.target.files], 'main'));
    }

    function handleFiles(files, target) {
      files.filter(f => f.type.startsWith('image/')).forEach(file => {
        const reader = new FileReader();
        reader.onload = e => openCropModal(e.target.result, file, target);
        reader.readAsDataURL(file);
      });
    }

    function openCropModal(src, file, target) {
      STATE.currentTarget = target;
      STATE.currentCropFile = file;
      const img = document.getElementById('crop-image');
      img.src = src;
      const modal = document.getElementById('crop-modal');
      modal.classList.remove('opacity-0', 'invisible');
      modal.classList.add('opacity-100', 'visible');
      modal.querySelector('.transform').classList.remove('scale-95');
      modal.querySelector('.transform').classList.add('scale-100');

      if (STATE.cropper) STATE.cropper.destroy();

      STATE.cropper = new Cropper(img, {
        aspectRatio: NaN,
        viewMode: 1,
        autoCropArea: 0.8,
        responsive: true,
        background: false,
        guides: true,
        center: true,
        highlight: false,
        cropBoxMovable: true,
        cropBoxResizable: true,
        toggleDragModeOnDblclick: false
      });
    }

    function closeCropModal() {
      const modal = document.getElementById('crop-modal');
      modal.classList.remove('opacity-100', 'visible');
      modal.classList.add('opacity-0', 'invisible');
      modal.querySelector('.transform').classList.remove('scale-100');
      modal.querySelector('.transform').classList.add('scale-95');
      
      if (STATE.cropper) {
        STATE.cropper.destroy();
        STATE.cropper = null;
      }
      STATE.currentCropFile = null;
      STATE.currentTarget = null;
    }

    async function applyCrop() {
      if (!STATE.cropper) return;

      try {
        const canvas = STATE.cropper.getCroppedCanvas({ width: 800, height: 800 });
        canvas.toBlob(async blob => {
          const fd = new FormData();
          fd.append('image', blob, `img-${Date.now()}.jpg`);

          showLoading();
          const res = await fetch(`${BASE_URL}/admin/products/upload-image`, {
            method: 'POST',
            body: fd
          });

          const json = await res.json();
         
          
          hideLoading();
          if (!json.success) {
            return showFormError('dynamic-error-msg', json.message || 'Image upload failed');
          }

          if (STATE.currentTarget === 'main') {
            STATE.uploadedImages.push(json.imageUrl);
            renderMainPreviews();
          }

          closeCropModal();
        }, 'image/jpeg', 0.9);
      } catch (err) {
        hideLoading();
        console.error(err);
        showFormError('dynamic-error-msg', 'Error processing image');
      }
    }

    function renderMainPreviews() {
      const container = document.getElementById('image-preview-container');
      container.innerHTML = '';
      STATE.uploadedImages.forEach((url, i) => {
        const div = document.createElement('div');
        div.className = 'relative aspect-square rounded-2xl overflow-hidden bg-gray-100 shadow-lg hover:-translate-y-1 hover:shadow-xl transition-all duration-200';
        div.innerHTML = `
          <img src="/${url}" alt="Product image ${i + 1}" class="w-full h-full object-cover">
          <button type="button" class="absolute top-2 right-2 w-8 h-8 bg-danger text-white border-none rounded-full cursor-pointer flex items-center justify-center text-base font-bold transition-all duration-200 opacity-90 hover:opacity-100 hover:scale-110" onclick="removeMainImage(${i})" title="Remove image">√ó</button>
        `;
        container.appendChild(div);
      });
    }

    function removeMainImage(i) {
      STATE.uploadedImages.splice(i, 1);
      renderMainPreviews();
    }

    // Form submission handler
    document.getElementById('product-form').addEventListener('submit', async e => {
      e.preventDefault();
      clearFormErrors();
     

      // Get form values
      const name = document.getElementById('product-name').value.trim();
      const description = document.getElementById('product-description').value.trim();
      const category = document.getElementById('product-category').value;
      const regularPrice = parseFloat(document.getElementById('product-regular-price').value) || 0;
      const salePrice = parseFloat(document.getElementById('product-sale-price').value) || 0;
      const stock = parseInt(document.getElementById('product-stock').value) || 0;
      const maxCartQuantity = parseInt(document.getElementById('product-max-cart-qty').value) || 5;
      const images = STATE.uploadedImages;
      const isActive = document.getElementById('product-active').checked;
      const isFeatured = document.getElementById('product-featured').checked;

      // Validation with correct field IDs
      if (!name) {
        return showFormError('name-error', 'Product name is required');
      }

      if (name.length < 3 || name.length > 50) {
        return showFormError('name-error', 'Product name must be between 3-50 characters');
      }

      if (!/^[a-zA-Z0-9\s\-]+$/.test(name)) {
        return showFormError('name-error', 'Product name can only contain letters, numbers, spaces, and dashes');
      }

      if (!category) {
        return showFormError('category-error', 'Category is required');
      }

      if (regularPrice <= 0) {
        return showFormError('regularPrice-error', 'Regular price must be greater than 0');
      }

      if (salePrice > 0 && salePrice >= regularPrice) {
        return showFormError('salePrice-error', 'Sale price must be less than regular price');
      }

      if (stock < 0) {
        return showFormError('stock-error', 'Stock cannot be negative');
      }

      if (maxCartQuantity < 1) {
        return showFormError('maxCartQuantity-error', 'Max cart quantity must be at least 1');
      }

      if (images.length < MIN_IMAGES) {
        return showFormError('images-error', `At least ${MIN_IMAGES} images are required`);
      }

      const payload = {
        productName: name,
        description,
        category, 
        regularPrice,
        salePrice,
        quantity: stock,
        maxCartQuantity,
        productImage: images,
        isActive,
        isFeatured,
        };

      showLoading();
      document.getElementById('product-spinner').classList.remove('hidden');
      document.getElementById('product-submit-btn').disabled = true;

      try {
        const res = await fetch(`${BASE_URL}/admin/products/api/update/${PRODUCT_ID}`, {
          method: 'PUT',
          headers: { 'Content-type': 'application/json' },
          body: JSON.stringify(payload)
        });

      
        const json = await res.json();

        hideLoading();
        document.getElementById('product-spinner').classList.add('hidden');
        document.getElementById('product-submit-btn').disabled = false;

        if (json.success) {
          document.getElementById('dynamic-success-msg').innerHTML = '<span class="text-xl">‚úÖ</span> Product updated successfully!';
          document.getElementById('dynamic-success-msg').classList.remove('hidden');
          setTimeout(() => window.location = '/admin/products', 1500);
        } else if (json.errors) {
          Object.entries(json.errors).forEach(([field, message]) => {
            showFormError(`${field}-error`, message);
          });
        } else {
          showFormError('dynamic-error-msg', json.message || 'Failed to update product');
        }
      } catch (err) {
        hideLoading();
        document.getElementById('product-spinner').classList.add('hidden');
        document.getElementById('product-submit-btn').disabled = false;
        console.error(err);
        showFormError('dynamic-error-msg', 'An error occurred while updating');
      }
    });

    document.addEventListener('DOMContentLoaded', () => {
      initializeImageUpload();
      renderMainPreviews(); // Render existing images
    });
  </script>
</body>
</html>