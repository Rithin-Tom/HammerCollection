

<div class="max-w-7xl mx-auto space-y-6">
    <div>
        <h1 class="text-3xl font-bold text-gray-900">User Management</h1>
        <p class="text-gray-600">Manage and monitor user accounts</p>
    </div>

    <!-- Filters -->
    <form id="filterForm" class="bg-white p-6 rounded-lg shadow-sm border grid grid-cols-1 md:grid-cols-4 gap-4">
    <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Search</label>
        <input type="text" name="name" placeholder="Enter name..."
               class="w-full px-4 py-2 border border-gray-300 rounded-lg">
    </div>
    <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
        <select name="status" class="w-full px-4 py-2 border border-gray-300 rounded-lg">
            <option value="">All Status</option>
            <option value="active">Active</option>
            <option value="blocked">Blocked</option>
        </select>
    </div>
    <div class="flex items-end">
        <button type="submit" class="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition">
            Apply Filters
        </button>
    </div>
</form>


    <!-- Users Table -->
    <div class="bg-white shadow-sm rounded-lg overflow-hidden">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-blue-600 text-white text-sm uppercase">
                <tr>
                    <th class="px-6 py-3 text-left">#</th>
                    <th class="px-6 py-3 text-left">Name</th>
                    <th class="px-6 py-3 text-left">Email</th>
                    <th class="px-6 py-3 text-left">Phone</th>
                    <th class="px-6 py-3 text-left">Status</th>
                    <th class="px-6 py-3 text-left">Action</th>
                </tr>
            </thead>
           <tbody id="userTableBody" class="divide-y divide-gray-100 bg-white">
                <% users.forEach((user, index) => { %>
                    <tr>
                        <td class="px-6 py-4"><%= index + 1 %></td>
                        <td class="px-6 py-4"><%= user.name %></td>
                        <td class="px-6 py-4"><%= user.email %></td>
                        <td class="px-6 py-4"><%= user.phone %></td>
                        <td class="px-6 py-4">
                            <span id="status-badge-<%= user._id %>"
                                  class="px-2 py-1 text-xs rounded-full <%= user.isBlocked ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700' %>">
                                <%= user.isBlocked ? 'Blocked' : 'Active' %>
                            </span>

                        </td>
                        <td class="px-6 py-4">
                          <button onclick="toggleUserStatus('<%= user._id %>')"
                                 id="action-btn-<%= user._id %>"
                                 class="px-3 py-1 rounded-lg text-sm <%= user.isBlocked ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700' %> hover:opacity-75">
                                    <%= user.isBlocked ? 'Unblock' : 'Block' %>
                           </button>

                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div id="pagination" class="flex justify-center space-x-2 mt-4"></div>
      
</div>

<!-- Script for Block/Unblock -->
<script>
   
document.addEventListener("DOMContentLoaded", () => {
    const filterForm = document.getElementById('filterForm');
    const userTableBody = document.getElementById('userTableBody');
    const pagination = document.getElementById('pagination');
    let currentPage = 1;

    filterForm.addEventListener('submit', (e) => {
        e.preventDefault();
        currentPage = 1;
        fetchUsers();
    });

    async function fetchUsers() {
        const formData = new FormData(filterForm);
        const query = new URLSearchParams(formData);
        query.append('page', currentPage);

        const res = await fetch(`/admin/api/users?${query}`);
        const data = await res.json();

        if (data.success) {
            renderUsers(data.users);
            renderPagination(data.currentPage, data.totalPages);
        } else {
            userTableBody.innerHTML = '<tr><td colspan="6">No users found</td></tr>';
        }
    }

    function renderUsers(users) {
        if (!users.length) {
            userTableBody.innerHTML = '<tr><td colspan="6" class="text-center py-4">No users found</td></tr>';
            return;
        }

        
        userTableBody.innerHTML = users.map((user, i) => `
            <tr>
                <td class="px-6 py-4">${i + 1}</td>
                <td class="px-6 py-4">${user.name}</td>
                <td class="px-6 py-4">${user.email}</td>
                <td class="px-6 py-4">${user.phone}</td>
                <td class="px-6 py-4">
                    <span id="status-badge-${user._id}" class="px-2 py-1 text-xs rounded-full ${user.isBlocked ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}">
                        ${user.isBlocked ? 'Blocked' : 'Active'}
                    </span>
                </td>
                <td class="px-6 py-4">
                    <button onclick="toggleUserStatus('${user._id}')" id="action-btn-${user._id}"
                            class="px-3 py-1 text-sm rounded-lg ${user.isBlocked ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'} hover:opacity-75">
                        ${user.isBlocked ? 'Unblock' : 'Block'}
                    </button>
                </td>
            </tr>
        `).join('');
    }

    function renderPagination(current, total) {
        pagination.innerHTML = '';
        for (let i = 1; i <= total; i++) {
            const btn = document.createElement('button');
            btn.textContent = i;
            btn.className = `px-4 py-2 rounded border ${i === current ? 'bg-blue-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-100'}`;
            btn.onclick = () => {
                currentPage = i;
                fetchUsers();
            };
            pagination.appendChild(btn);
        }
    }

    // Initial load
    fetchUsers();
});





function toggleUserStatus(userId) {
    // Get current status text from badge
    const statusText = document.getElementById(`status-badge-${userId}`).textContent.trim();
    const isBlocked = statusText === 'Blocked';
    const action = isBlocked ? 'Unblock' : 'Block';

    Swal.fire({
        title: `Are you sure?`,
        text: `Do you want to ${action.toLowerCase()} this user?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: `Yes, ${action}`
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/user-management/block/${userId}`, {
                method: 'POST'
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    setTimeout(() => {
                        const statusBadge = document.getElementById(`status-badge-${userId}`);
                        const actionButton = document.getElementById(`action-btn-${userId}`);

                        if (data.isBlocked) {
                            statusBadge.textContent = 'Blocked';
                            statusBadge.className = 'px-2 py-1 text-xs rounded-full bg-red-100 text-red-700';
                            actionButton.textContent = 'Unblock';
                            actionButton.className = 'px-3 py-1 rounded-lg text-sm bg-green-100 text-green-700 hover:opacity-75';
                        } else {
                            statusBadge.textContent = 'Active';
                            statusBadge.className = 'px-2 py-1 text-xs rounded-full bg-green-100 text-green-700';
                            actionButton.textContent = 'Block';
                            actionButton.className = 'px-3 py-1 rounded-lg text-sm bg-red-100 text-red-700 hover:opacity-75';
                        }

                        Swal.fire({
                            title: 'Success!',
                            text: `User has been ${action.toLowerCase()}ed.`,
                            icon: 'success',
                            timer: 1500,
                            showConfirmButton: false
                        });
                    }, 10);
                } else {
                    Swal.fire('Error!', 'Failed to update user.', 'error');
                }
            })
            .catch(err => {
                console.error(err);
                Swal.fire('Error!', 'Request failed.', 'error');
            });
        }
    });
}
</script>





